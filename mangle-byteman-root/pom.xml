<!-- ~ JBoss, Home of Professional Open Source ~ Copyright 2011, Red Hat
	and individual contributors as identified ~ by the @authors tag. See the
	copyright.txt in the distribution for a ~ full listing of individual contributors.
	~ ~ This is free software; you can redistribute it and/or modify it ~ under
	the terms of the GNU Lesser General Public License as ~ published by the
	Free Software Foundation; either version 2.1 of ~ the License, or (at your
	option) any later version. ~ ~ This software is distributed in the hope that
	it will be useful, ~ but WITHOUT ANY WARRANTY; without even the implied warranty
	of ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU ~ Lesser
	General Public License for more details. ~ ~ You should have received a copy
	of the GNU Lesser General Public ~ License along with this software; if not,
	write to the Free ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor,
	Boston, MA ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org. ~ ~
	@authors Andrew Dinn -->
<!-- Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved. This product
	is licensed to you under the Apache License, Version 2.0 (the "License").
	You may not use this product except in compliance with the License. This
	product may include a number of subcomponents with separate copyright notices
	and license terms. Your use of these subcomponents is subject to the terms
	and conditions of the subcomponent's license, as noted in the LICENSE file. -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.vmware.mangle</groupId>
		<artifactId>mangle-root</artifactId>
		<version>3.5.0</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>mangle-byteman-root</artifactId>
	<packaging>pom</packaging>
	<description>
        Byteman is a java agent-based bytecode injection tool. It can be used to inject Event Condition Action rules
        into Java application and JVM runtime methods. Its primary purpose is to support execution tracing and fault
        injection testing.
    </description>
	<name>mangle-byteman-root</name>
	<properties>
		<!-- actual path to tools.jar is defined in the profiles below -->
		<tools.jar>${project.basedir}/lib/tools.jar</tools.jar>

		<!-- Decouple file encoding of the platform encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- maven-release-plugin -->
		<useReleaseProfile>false</useReleaseProfile>
		<pushChanges>false</pushChanges>
		<autoVersionSubmodules>true</autoVersionSubmodules>
		<gson.version>2.8.5</gson.version>
	</properties>
	<dependencyManagement>
		<dependencies>

			<!-- Internal dependencies -->
			<dependency>
				<groupId>com.vmware.mangle</groupId>
				<artifactId>mangle-byteman</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.vmware.mangle</groupId>
				<artifactId>mangle-byteman-submit</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.vmware.mangle</groupId>
				<artifactId>mangle-byteman-install</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.vmware.mangle</groupId>
				<artifactId>mangle-byteman-faults</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.13.1</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.testng</groupId>
				<artifactId>testng</artifactId>
				<version>6.8.5</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.1.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>2.10.3</version>
					<dependencies>
						<dependency>
							<groupId>org.codehaus.plexus</groupId>
							<artifactId>plexus-archiver</artifactId>
							<version>3.6.0</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.9</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.6</version>
					<dependencies>
						<dependency>
							<groupId>org.codehaus.plexus</groupId>
							<artifactId>plexus-archiver</artifactId>
							<version>3.6.0</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>1.4</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.9</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-verifier-plugin</artifactId>
					<version>1.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.6</version>
					<dependencies>
						<dependency>
							<groupId>org.codehaus.plexus</groupId>
							<artifactId>plexus-archiver</artifactId>
							<version>3.6.0</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<version>3.0.1</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<modules>
		<module>submit</module>
		<module>agent-faults</module>
		<module>agent</module>
		<module>install</module>
		<module>download</module>
		<module>agent-integration-tests</module>
	</modules>

	<profiles>
		<profile>
			<!-- normally tools jar is in ../lib/tools.jar -->
			<id>default-toolsjar-profile</id>
			<activation>
				<file>
					<exists>${project.build.directory}/lib/tools.jar</exists>
				</file>
			</activation>
			<properties>
				<tools.jar>${project.build.directory}/lib/tools.jar</tools.jar>
			</properties>
		</profile>
		<!-- We override the tools.jar property on mac osx -->
		<profile>
			<!-- on pre-jdk7 mac releases tools jar is in ../Classes/classes.jar -->
			<id>mac-toolsjar-profile</id>
			<activation>
				<file>
					<exists>${java.home}/../Classes/classes.jar</exists>
				</file>
			</activation>
			<properties>
				<tools.jar>${java.home}/../Classes/classes.jar</tools.jar>
			</properties>
		</profile>
		<!-- new profile for releasing to maven central to do a release update 
			the version number from a SNAPSHOT version to a full version and execute 
			mvn -P centralRelease deploy you will need to have permission to upload the 
			jars to the sonatype repo and to have configured the relevant gpg key settings 
			in ~/.m2/settings.xml <profile> <id>centralRelease</id> <properties> <gpg.passphrase>XXXXXXXXXX</gpg.passphrase> 
			</properties> </profile> you will also need to include a user name and password 
			entry for the nexus server and the nexus snapshot server - note that the 
			ids must match the ones used in the repositories section of this pom <servers> 
			<server> <id>sonatype-releases-repository</id> <username>NNNNNNNN</username> 
			<password>PPPPPPPP</password> </server> <server> <id>sonatype-snapshots-repository</id> 
			<username>NNNNNNNN</username> <password>PPPPPPPP</password> </server> </servers> -->
		<profile>
			<id>centralRelease</id>
			<!-- we need to be able to sign the jars we install -->
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.5</version>
						<configuration>
							<passphrase>${gpg.passphrase}</passphrase>
							<useAgent>${gpg.useAgent}</useAgent>
						</configuration>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>